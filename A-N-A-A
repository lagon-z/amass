import os
import sys
import xml.etree.cElementTree as ET
import json
import requests
import time
import threading

class Amass:
    
    def __init__(self, domain):
        self.domain = domain


    def getSubdomain(self):
        os.system(f"amass enum -d {self.domain} -o subdomain.txt")
        fileDomain = open("subdomain.txt", "r+")
        listSubdomain = []
        for subdomain in fileDomain:
            listSubdomain.append(subdomain)
        fileDomain.close()
        return listSubdomain
        
        
    # def listFileSubdomain(self):
    #     # setup a queue for subdomain list
    #     # global queueSubdomain 
    #     fileSubdomain = open("subdomain.txt", "r+")

    #     for subdomain in fileSubdomain:
    #         if subdomain not in queueSubdomain:
    #             queueSubdomain.append(subdomain)
    

    def nmapOpenPortSubdomain(self, subdomain):
        os.system(f" nmap {subdomain} -Pn -oX subdomain.xml")
        tree = ET.parse('subdomain.xml')
        root = tree.getroot()
        portList = []

        for host in root.findall('host'):
            ports = host.findall('ports')[0].findall('port')
            for port in ports:
                portList.append(port.get('portid'))
            time.sleep(1)
        return portList
        

    def discoverOpenPortOfTotalSubdomains(self, listSubdomain = []):
        subdomainPortsDict = {}

        for subdomain in listSubdomain:
            subdomainPortsDict[subdomain] = self.nmapOpenPortSubdomain(subdomain)
        return subdomainPortsDict
        
    
    # def threadAmass(self):
    #     # thread 1: scan subdomain
    #     scanSubdomainWithThread = self.scanSubdomain()
    #     threadScanSubdomain = threading.Thread(target=scanSubdomainWithThread)
    
    #     # thread 2: pull subdomain to nmap
    #     while(len(queueSubdomain) != 0):
    #         nmapOpenPort = self.nmapOpenPortSubdomain(queueSubdomain[0])
    #         queueSubdomain.pop(0)
    #     threadNmapSubdomain = threading.Thread()


class Aquatone:
    def scanAquatone(self, subdomainPortsDict = {}):
        for subdomain, openPort in subdomainPortsDict.items():
            openPorts = ",".join(openPort)     
            os.system(f"echo {subdomain} | aquatone -ports {openPorts} ") 
            fileUrl = open("list_url.txt", "r+")
            list_url = []
            for url in fileUrl:
                list_url.append(url)
            fileUrl.close()
            return list_url

stepOne = Amass("fpt.vn")

# getSubdomain = test.getSubdomain()

# *** FOR TESTING *** #
getSubdomain = [
    "isp-mta1.fpt.vn",
    "isp-mta4.fpt.vn",
    "dns-b.fpt.vn",
    "isp-dhcp.fpt.vn",
    "dns5.fpt.vn",
    "beta-cms.fpt.vn",
    "sip.fpt.vn",
    "tenmien.fpt.vn",
    "isp-radius1.fpt.vn",
    "isp-radius2.fpt.vn"
]

dictSubdomainAndOpenPort = stepOne.discoverOpenPortOfTotalSubdomains(getSubdomain)

stepTwo = Aquatone()
stepTwo.scanAquatone(dictSubdomainAndOpenPort)
