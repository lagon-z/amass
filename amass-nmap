import os,sys
import xml.etree.cElementTree as ET
import json
import requests
import requests.packages.urllib3
import time
requests.packages.urllib3.disable_warnings()
tarurl = "https://192.168.233.130:3443/"
apikey="1986ad8c0a5b3df4d7028d5f3c06e936c0d5fcab7ab93418d84681370004db207"
headers = {"X-Auth":apikey,"content-type": "application/json"}
list_processing = []
def getSubdomain(domain):
    os.system(f"amass enum -d {domain} -o domain.txt")
    f = open("domain.txt", "r+")
    list=[]
    for x in f:
        list.append(x)
    f.close()
    return list
def discoverOpenPortsubdomain(domain):
    os.system(f" nmap {domain} -oX sub-domain.xml")
    tree = ET.parse('sub-domain.xml')
    root = tree.getroot()
    portList = []
    for host in root.findall('host'):
        ports = host.findall('ports')[0].findall('port')
        for port in ports:
            portList.append(int(port.get('portid')))
    return (portList)
# f = open("domain.txt", "r+")
# list=[]
# for x in f:
#     list.append(x)
# f.close()
def discoverOpenPortsubdomains(list=[]):
    mydict={}
    for x in list:
        print(x)
        mydict[x]=discoverOpenPortsubdomain(x)
    return mydict

def aquatone():
    os.system(f"cat domain.txt | aquatone -ports medium ") 
    f = open("list_url.txt", "r+")
    list_url=[]
    for x in f:
        list_url.append(x)
    f.close()
    return list_url
def addtask(url=''):
    data = {"address":url,"description":url,"criticality":"10"}
    try:
        response = requests.post(tarurl+"/api/v1/targets",data=json.dumps(data),headers=headers,timeout=30,verify=False)
        result = json.loads(response.content)
        return result['target_id']
    except Exception as e:
        print(str(e))
        return
def startscan(target_id):
    data = {"target_id":target_id,"profile_id":"11111111-1111-1111-1111-111111111111","schedule": {"disable": False,"start_date":None,"time_sensitive": False}}
    try:
        response = requests.post(tarurl+"/api/v1/scans",data=json.dumps(data),headers=headers,timeout=30,verify=False)
        result = json.loads(response.content)
        return result['target_id']
    except Exception as e:
        print(str(e))
        return   
def checkProcess() :
    for scan_id in list_processing : 
        try:
            response = requests.get(tarurl+"/api/v1/scans/"+str(scan_id),headers=headers,timeout=30,verify=False)
            result = json.loads(response.content)
            status = result['current_session']['status']
            if status == "completed":
                list_processing.remove(scan_id)
        except Exception as e:
            print(str(e))
            return
    return len(list_processing)
def config(url):
    process = checkProcess()
    while True:
        if process >=3 :
            time.sleep(300)
            process = checkProcess()
        else : 
            list_processing.append(startscan(addtask(url)))
            break
def main():
    val=input()
    print(discoverOpenPortsubdomains(getSubdomain(val)))
    list_url = aquatone()
    for url in list_url :
        config(url)


if __name__ == "__main__":
    main()



